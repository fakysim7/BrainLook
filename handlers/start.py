from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from aiogram.types import FSInputFile

from utils.states import ProfileStates
from keyboards.menu import create_main_menu_keyboard
from keyboards.profile_menu import create_profile_menu_keyboard
from database.crud import Database

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°—Ç–µ–π—Ç—ã –¥–ª—è FSM
class Registration(StatesGroup):
    age = State()
    workplace = State()

@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    await db.connect()
    
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_info = await db.get_user_info(user_id)
    if not user_info:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(Registration.age)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard()
        )
    
    await db.close()

@router.message(Registration.age)
async def process_age(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    age = message.text
    if not age.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    
    await state.update_data(age=int(age))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã/—É—á–µ–±—ã
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —É—á–µ–±—ã:")
    await state.set_state(Registration.workplace)

@router.message(Registration.workplace)
async def process_workplace(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã/—É—á–µ–±—ã
    workplace = message.text
    await state.update_data(workplace=workplace)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    age = data.get("age")
    workplace = data.get("workplace")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = Database()
    await db.connect()
    
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    await db.register_user(user_id, username, first_name, last_name, age, workplace)
    await db.close()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu_keyboard()
    )

@router.callback_query(F.data == "profile")
async def profile(callback: types.CallbackQuery):
    db = Database()
    await db.connect()
    
    user_id = callback.from_user.id
    user_info = await db.get_user_info(user_id)
    await db.close()
    
    if user_info:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ NULL –≤ last_name
        last_name = user_info['last_name'] if user_info['last_name'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        profile_message = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ò–º—è: {user_info['first_name']}\n\n"
            f"–§–∞–º–∏–ª–∏—è: {last_name}\n\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_info['age']}\n\n"
            f"–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã/—É—á–µ–±—ã: {user_info['workplace']}"
        )
        await callback.answer()
        await callback.message.answer(profile_message, reply_markup=create_profile_menu_keyboard())
    else:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@router.callback_query(F.data == "return_to_menu")
async def return_to_menu(callback: types.CallbackQuery):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")
    photo = FSInputFile("D:/BraiLook/AI_Assist/image/image.png")
    await callback.answer()
    await callback.message.answer_photo(
        photo,
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu_keyboard()
    )

@router.callback_query(F.data == "change_age")
async def change_age(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileStates.change_age)

@router.message(ProfileStates.change_age)
async def process_new_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    age = message.text
    if not age.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    await db.connect()
    await db.update_user_age(message.from_user.id, int(age))
    await db.close()
    
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

@router.callback_query(F.data == "change_workplace")
async def change_workplace(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã/—É—á–µ–±—ã."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã/—É—á–µ–±—ã:")
    await state.set_state(ProfileStates.change_workplace)


@router.message(ProfileStates.change_workplace)
async def process_new_workplace(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã/—É—á–µ–±—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    workplace = message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã/—É—á–µ–±—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    await db.connect()
    await db.update_user_workplace(message.from_user.id, workplace)
    await db.close()
    
    await message.answer("–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã/—É—á–µ–±—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()

@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def return_to_menu(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")
    photo = FSInputFile("D:/BraiLook/AI_Assist/image/image.png")
    await message.answer_photo(
        photo,
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu_keyboard()
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_start_handlers(dp):
    dp.include_router(router)
