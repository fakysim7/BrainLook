# from aiogram import Router, types, F
# from aiogram.filters import Command
# import logging

# from database.crud import Database
# from config import Config

# # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
# router = Router()

# @router.message(Command("my_events"))
# @router.callback_query(F.data == "my_events")  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Inline-–∫–Ω–æ–ø–∫–∏
# async def my_events(event: types.Message | types.CallbackQuery):
#     # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç message
#     if isinstance(event, types.CallbackQuery):
#         message = event.message
#     else:
#         message = event

#     logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è.")
#     db = Database()
#     await db.connect()

#     # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     events = await db.get_user_events(message.from_user.id)
#     await db.close()

#     if not events:
#         await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
#         return

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π
#     events_list = "–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n"
#     for event in events:
#         event_date = event["event_date"].strftime("%Y-%m-%d %H:%M")
#         events_list += f"üìÖ {event['event_name']}\n"
#         events_list += f"üìù {event['event_description']}\n" if event["event_description"] else ""
#         events_list += f"‚è∞ {event_date}\n\n"

#     await message.answer(events_list)

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# def register_my_events_handlers(dp):
#     dp.include_router(router)

from aiogram import Router, types, F
from aiogram.filters import Command
import logging

from database.crud import get_user_events  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
from keyboards.reply import create_reply_menu_keyboard
from config import Config

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.callback_query(F.data == "my_events")
async def my_events(callback_query: types.CallbackQuery):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è.")
    events = await get_user_events(callback_query.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

    if not events:
        await callback_query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π
    events_list = "–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for event in events:
        event_date = event["event_date"].strftime("%Y-%m-%d %H:%M")
        events_list += f"üìÖ {event['event_name']}\n"
        if event["event_description"]:  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            events_list += f"üìù {event['event_description']}\n"
        events_list += f"‚è∞ {event_date}\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    await callback_query.message.answer(events_list, reply_markup=create_reply_menu_keyboard())

    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_my_events_handlers(dp):
    dp.include_router(router)